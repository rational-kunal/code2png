{"version":3,"sources":["components/Editor.js","components/Render.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","state","textAreaValue","handleTextAreaChange","bind","event","this","setState","target","value","editorTextChange","Card","style","marginTop","CardContent","Typography","variant","component","TextField","fullWidth","margin","label","multiline","rows","rowsMax","onChange","React","Component","Render","codeFontSize","Prism","highlightAll","prevProps","prevState","snapshot","size","id","InputProps","endAdornment","InputAdornment","position","e","padding","borderRadius","className","fontSize","content","App","renderContent","text","toPng","document","getElementById","then","dataUrl","download","catch","error","console","theme","createMuiTheme","palette","type","ThemeProvider","CssBaseline","Container","maxWidth","Button","onClick","didRenderPressed","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2ZAQqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAAEC,cAAe,IAE9B,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBALb,E,iEAQEC,GACjBC,KAAKC,SAAS,CACVL,cAAeG,EAAMG,OAAOC,QAEhCH,KAAKN,MAAMU,iBAAiBL,EAAMG,OAAOC,S,+BAIzC,OACI,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,KACtB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,YAIA,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,SACPC,MAAM,OACNC,WAAS,EACTC,KAAM,EACNC,QAAS,GACTf,MAAOH,KAAKL,MAAMC,cAClBuB,SAAUnB,KAAKH,qBACfa,QAAQ,mB,GAjCIU,IAAMC,W,kCCDrBC,E,kDACjB,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT4B,aAAc,QAJH,E,gEASfC,IAAMC,iB,yCAGSC,EAAWC,EAAWC,GACrCJ,IAAMC,iB,+BAGA,IAAD,OACL,OACI,6BACI,kBAACb,EAAA,EAAD,CACIiB,KAAK,QACLd,MAAM,YACNe,GAAG,2BACHC,WAAY,CACRC,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OAAzB,OAGRxB,QAAQ,WACRS,SAAU,SAACgB,GAAD,OACN,EAAKlC,SAAS,CAAEsB,aAAcY,EAAEjC,OAAOC,MAAQ,UAGvD,yBAAK2B,GAAG,SAASxB,MAAO,CAAE8B,QAAS,QAC/B,yBAAK9B,MAAO,CAAE+B,aAAc,SACxB,0BACIC,UAAU,sBACVhC,MAAO,CAAEiC,SAAUvC,KAAKL,MAAM4B,eAE7BvB,KAAKN,MAAM8C,gB,GAxCJpB,IAAMC,WC6D3BoB,E,kDAtDX,WAAY/C,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT+C,cAAe,IAGnB,EAAKtC,iBAAmB,EAAKA,iBAAiBN,KAAtB,gBAPT,E,6DAUF6C,GACb3C,KAAKC,SAAS,CACVyC,cAAeC,M,yCAKnBC,gBAAMC,SAASC,eAAe,WACzBC,MAAK,SAAUC,GACZC,IAASD,EAAS,kBAErBE,OAAM,SAAUC,GACbC,QAAQD,MAAM,8BAA+BA,Q,+BAKrD,IAAME,EAAQC,YAAe,CACzBC,QAAS,CAAEC,KAAM,UAGrB,OACI,kBAACC,EAAA,EAAD,CAAeJ,MAAOA,GAClB,kBAACK,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,EAAD,CAAQxD,iBAAkBJ,KAAKI,mBACD,KAA7BJ,KAAKL,MAAM+C,eAAwB,CAChC,kBAACmB,EAAA,EAAD,CACIhC,KAAK,SACL2B,KAAK,SACL9C,QAAQ,WACRoD,QAAS9D,KAAK+D,iBACdzD,MAAO,CAAEC,UAAW,GAAIyD,aAAc,KAL1C,UASA,kBAAC,EAAD,CAAQxB,QAASxC,KAAKL,MAAM+C,uB,GA/ClCtB,IAAMC,WCDJ4C,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ3B,SAASC,eAAe,SD0HpB,kBAAmB2B,WACnBA,UAAUC,cAAcC,MACnB5B,MAAK,SAAC6B,GACHA,EAAaC,gBAEhB3B,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.ae9c4809.chunk.js","sourcesContent":["import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class Editor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { textAreaValue: '' };\n\n        this.handleTextAreaChange = this.handleTextAreaChange.bind(this);\n    }\n\n    handleTextAreaChange(event) {\n        this.setState({\n            textAreaValue: event.target.value,\n        });\n        this.props.editorTextChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <Card style={{ marginTop: 12 }}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        code2png\n                    </Typography>\n\n                    <TextField\n                        fullWidth\n                        margin=\"normal\"\n                        label=\"code\"\n                        multiline\n                        rows={8}\n                        rowsMax={15}\n                        value={this.state.textAreaValue}\n                        onChange={this.handleTextAreaChange}\n                        variant=\"outlined\"\n                    />\n                </CardContent>\n            </Card>\n        );\n    }\n}\n","import React from 'react';\nimport Prism from 'prismjs';\nimport '../css/prism.css';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nexport default class Render extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            codeFontSize: '12px',\n        };\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        Prism.highlightAll();\n    }\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    size=\"small\"\n                    label=\"font size\"\n                    id=\"outlined-start-adornment\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">px</InputAdornment>\n                        ),\n                    }}\n                    variant=\"outlined\"\n                    onChange={(e) =>\n                        this.setState({ codeFontSize: e.target.value + 'px' })\n                    }\n                />\n                <div id=\"render\" style={{ padding: '4px' }}>\n                    <pre style={{ borderRadius: '12px' }}>\n                        <code\n                            className=\"language-javascript\"\n                            style={{ fontSize: this.state.codeFontSize }}\n                        >\n                            {this.props.content}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nimport { toPng } from 'html-to-image';\nimport download from 'downloadjs';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\n\nimport Editor from './components/Editor';\nimport Render from './components/Render';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            renderContent: '',\n        };\n\n        this.editorTextChange = this.editorTextChange.bind(this);\n    }\n\n    editorTextChange(text) {\n        this.setState({\n            renderContent: text,\n        });\n    }\n\n    didRenderPressed() {\n        toPng(document.getElementById('render'))\n            .then(function (dataUrl) {\n                download(dataUrl, 'my-node.png');\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n            });\n    }\n\n    render() {\n        const theme = createMuiTheme({\n            palette: { type: 'dark' },\n        });\n\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Container maxWidth=\"md\">\n                    <Editor editorTextChange={this.editorTextChange} />\n                    {this.state.renderContent === '' || [\n                        <Button\n                            size=\"medium\"\n                            type=\"submit\"\n                            variant=\"outlined\"\n                            onClick={this.didRenderPressed}\n                            style={{ marginTop: 12, marginBottom: 12 }}\n                        >\n                            render\n                        </Button>,\n                        <Render content={this.state.renderContent} />,\n                    ]}\n                </Container>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}